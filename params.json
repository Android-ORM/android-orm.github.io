{"name":"Android ORM","tagline":"Android ORM (Aorm) in an ORM implementation on Android platform, include ORM core, relative Eclipse plugin(ADT extensions) and example Android application.","body":"# Introduction\r\n\r\nDid you used sqlite to save your data on Android? If you did, you may be puzzled for the complexity of mechanism. Now the Andoird ORM (Aorm) coming which armed to make it simple for the developers. If you have the interesting, please join us.\r\n\r\n# Features\r\n* Brief ORM mapping, just write an annotation for the field of Java beans. e.g. @Column(name=\"_name\") to mapping _name columnn of database to name property.\r\n* Powerful Forward Engineering supporting, generating DDL and ContentProvider automaticlly.\r\n* Useful Assist feature, create your Activity/Service/BroadcastReceiver with a wizard and configurat them in AndroidManifest.xml automatically.\r\n* ...\r\nMore feature, please experience it for your self.\r\n\r\n# Projects\r\n## cn.ieclipse.aorm.core\r\nThe core project of Android ORM, providing ORM annotation parsing, orm core feature.\r\n## cn.ieclipse.aorm.eclipse\r\nThe eclipse plug-in project, provider code generating, DDL generating assist feature. you can found it at https://github.com/Jamling/Aorm-Eclipse-Plugin\r\n\r\n## cn.ieclipse.aorm.example\r\nThe example Android project using Android ORM.\r\n\r\n# Code samples\r\n\r\n## Query\r\n\r\n        Session session = ExampleContentProvider.getSession();\r\n        // simplest query, query all student table.\r\n        Criteria criteria = Criteria.create(Student.class);\r\n        // add restrication: id equals\r\n        criteria.add(Restrictions.eq(\"id\", 1));\r\n        // add restriction: name like Jamling\r\n        criteria.add(Restrictions.like(\"name\", \"Jaming\"));\r\n        // add restriction: age > 30\r\n        criteria.add(Restrictions.lt(\"age\", 30));\r\n        // add order\r\n        criteria.addOrder(Order.asc(\"age\"));\r\n        // set district\r\n        criteria.setDistinct(true);\r\n        // set limit from row 10 to 20\r\n        criteria.setLimit(10, 10);\r\n\r\n        List<Student> list = session.list(Student.class);\r\n        // if you use Android CursorAdapter you can:\r\n        Cursor c = session.query(criteria);\r\n\r\n        // set alias, so the project will be alias.columnn. e.g. s.name\r\n        // criteria.setAlias(\"s\");\r\n        // multi-table query\r\n        criteria.addChild(StudentMore.class, \"m\", Criteria.INNER_JOIN,\r\n                Restrictions.geProperty(\"s.id\", \"m.id\"));\r\n        // query to cursor\r\n        c = session.query(criteria);\r\n        // convert to list.\r\n        List<Object[]> ret = CursorUtils.getFromCursor(c,\r\n                new Class[] { Student.class }, new String[] { \"s\", \"m\" });\r\n        // query to list.\r\n        ret = session.listAll(criteria);\r\n        Object[] item = ret.get(0);\r\n        Student s = (Student) item[0];\r\n        StudentMore m = (StudentMore) item[1];\r\n        //\r\n\r\n## Other\r\n        Session session = ExampleContentProvider.getSession();\r\n        // insert\r\n        Student s = new Student();\r\n        s.setName(\"Jamling\");\r\n        long rowId = session.insert(s, null);\r\n        // update student's name to Jame whose id is 1\r\n        s.setId(1);\r\n        s.setName(\"Jame\");\r\n        int rows = session.update(s);\r\n        // delete student whose id is 2\r\n        session.deleteById(Student.class, 2);\r\n        // query student whose id is 4\r\n        s = session.get(Student.class, 4);\r\n\r\n## Author\r\nJamling \r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}